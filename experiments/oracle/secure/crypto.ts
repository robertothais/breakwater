import crypto from "crypto";

const RSA_PRIVATE_KEY = `
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA3W5L7J7F1R87ZPp6vhGN6Y80s31vaO1YCk44gX/L0IUCDv49
9ACmxe0jliASGhMUpj8V+58I8cDzowbXBEzWzbwg4wSG9bB5/UizAczR1kXtT4Ic
A/GhtCymdSpBi5qRgMsKf4OJi2nDw9E+6PXj2rEL7ukSfzM2MnEh/0pS7TL/qCyJ
tU0QZqOz5FZP2TA89bDzMUbhTU96INfow7PSZePAyXvt+gusTBSyxc4fPKhnBm+F
ScKjENb9TBN4drak5OFsWk9JKbyqMIfWeMo9Ne3M+e9DCxausQmj1SCkFEqNPUVw
w4RLWaqU4IwN3K4qly10qxu6LHv/eFJZYuRE2QIDAQABAoIBAA4seDmuNBWfSSr+
iYrPDtlrbEEs/0ulHaSTOzS23HH9gZM6HPcYb5RtyIBcjywSGplFon+Xv3fSFQZT
csH4tSs4JpbBfG4PnM9kruinlqrzkOws9OQfvG0PCpynVsi73SJ0XLiqz8wXugs3
wqIg0zP1b0EctC1mNsrlyPpRZJuAMK+zi3aMaxyUwtCp6Ps8x5FfsWRIv+ukO40Y
c1NmC63ZCl5jPDxMK/miEScby88H5CUwqfuJp0geg/n24x/X6KhSYZaB+A1Pt7lU
MvOlbADxolpB+SjwroF3AmNMhgV0T5qOAXHRDibaObxnwZV/NaU8pk7SzjpfICZv
yD9nLx0CgYEA+XZPAED4dN4KBl/QFpXHoRKi2OSWOhrc+5V0uN+rv6EYCab7KWBt
xosu5POVw72vlwlCKFdmF7mGnvoVutC7HHbdgMqb1/mSSupMPj1xNnjNQysg6pZQ
4fJBMn50QBlsnL2Fkb3km7MjBuqA4kLAE4qsSXblFiQiG9Ttj14N528CgYEA4zvr
n6lt9CRYDT1yaYZtvzYIgLNylALmPz3TFM4KNFbI5R8cGYOvFwM6s++TiKpByaMt
SqB89akZj+eCxRwf/s3iHihpoPQhhXkh4tBZG9TEETqeDJt44Yu8EEo6za05C9iv
0lbwi9WeKK6dQ9ASZChAwQ10o5g6AJdA/JjrNDcCgYEAzGXVwT161jcAO8zRsU+0
LBQa/l/9f0p3emQxKTGLhg42peH9tR9fkuiD2fCD68hGURiy7l7+Nb47wZLjrxhL
17zFLTvViZbh+SQUqIKrephshvaVl+DmENvv87GNCuBKD/txr8LJx5F1x7rpM3rB
6sEa/W6/se6VS/yhUXEdL10CgYBJwze3em5g5DNZCOtM6gBSI54a+SVmepJ3UQBm
LoQNfWZ1SeX7Ok3p8Hhr1IdVw77bT4byRKqLrDrKBeLjTT/tnLOcCo5PWzBOfYXM
dMmYSTbkSNzpRsa0oIGJ4C66eVKdT9ezNdmb6toOZrBSRQbTUGXExTNpr46UhoTn
+lPPfQKBgQDQ6/lil3bARwOUT4ycMd8tZodZGKY1zpQvWX4aQnbM5xxFK6JmF5b7
qnPeXXEW6bGkUobl1CD6W2gR/s8CuG1gvU+PTgVbQkZgZNKQPG7R186YTLYU3ode
rG9WUtMAVHSsec7DM6uYBl17SEHTDKM2Jk+KxIbl4tBLLv2mP8SnIA==
-----END RSA PRIVATE KEY-----
`;

export function decryptRsa(encryptedDataB64: string) {
  try {
    const encryptedBuffer = Buffer.from(encryptedDataB64, "base64");
    const keyObj = crypto.createPrivateKey(RSA_PRIVATE_KEY);

    const decrypted = crypto.privateDecrypt(
      {
        key: keyObj,
        padding: crypto.constants.RSA_PKCS1_PADDING, // PKCS#1 v1.5
      },
      encryptedBuffer
    );

    return {
      success: true,
      ciphertextBytes: encryptedBuffer.length,
      plaintextBytes: decrypted.length,
      plaintextB64: decrypted.toString("base64"),
      plaintextHexHead: decrypted.subarray(0, 16).toString("hex"),
      utf8Preview: decrypted.toString(
        "utf8",
        0,
        Math.min(decrypted.length, 100)
      ),
    };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

export function deriveAlphabet(salt: number) {
  const seed =
    "-f3_v8spVG29kzl5XuDNLci6rdoQy0ZFqmSACMgYbjRe7nPTOEKtawUhJ4HWIxB1";
  const step = (salt & 0x3f) + 1;
  const out = [];
  for (let k = 0; out.length < 64; k++) {
    for (let j = step - 1; j >= 0; j--) {
      const idx = j + step * k;
      if (idx < 64) out.push(seed[idx]);
    }
  }
  return out.join("");
}

export function customDecode64(data: string, salt: number) {
  const alphabet = deriveAlphabet(salt);
  const map = new Map();
  for (let i = 0; i < alphabet.length; i++) map.set(alphabet[i], i);
  const out = [];
  let sextets = [];
  for (let ch of data) {
    if (ch === "*" || ch === "\0") break;
    if (ch === " ") ch = "+";
    if (!map.has(ch)) continue;
    sextets.push(map.get(ch));
    if (sextets.length === 4) {
      const [a, b, c, d] = sextets;
      out.push((a << 2) | (b >> 4));
      out.push(((b & 0x0f) << 4) | (c >> 2));
      out.push(((c & 0x03) << 6) | d);
      sextets = [];
    }
  }
  if (sextets.length === 2) {
    const [a, b] = sextets;
    out.push((a << 2) | (b >> 4));
  } else if (sextets.length === 3) {
    const [a, b, c] = sextets;
    out.push((a << 2) | (b >> 4));
    out.push(((b & 0x0f) << 4) | (c >> 2));
  }
  return Buffer.from(out);
}

const EMBEDDED_CA_CERT_DATA = new Uint8Array([
  0x50, 0x7e, 0x5c, 0x65, 0x41, 0x40, 0x7e, 0x5c, 0x70, 0x37, 0x6d, 0x71, 0x76,
  0x60, 0x3c, 0x33, 0x31, 0x5e, 0x5b, 0x62, 0x75, 0x71, 0x32, 0x3c, 0x76, 0x5e,
  0x5c, 0x76, 0x34, 0x3c, 0x73, 0x40, 0x65, 0x43, 0x76, 0x6f, 0x71, 0x5c, 0x65,
  0x41, 0x47, 0x7e, 0x5c, 0x65, 0x41, 0x4a, 0x37, 0x63, 0x70, 0x3c, 0x4f, 0x5c,
  0x76, 0x6f, 0x6e, 0x5e, 0x57, 0x63, 0x3d, 0x62, 0x7d, 0x40, 0x6d, 0x32, 0x4a,
  0x65, 0x34, 0x65, 0x43, 0x53, 0x3d, 0x5c, 0x76, 0x3c, 0x5b, 0x72, 0x34, 0x65,
  0x49, 0x68, 0x32, 0x40, 0x76, 0x61, 0x4c, 0x41, 0x3d, 0x43, 0x49, 0x41, 0x65,
  0x31, 0x62, 0x49, 0x63, 0x68, 0x5c, 0x52, 0x65, 0x30, 0x5c, 0x31, 0x76, 0x29,
  0x54, 0x76, 0x71, 0x65, 0x3d, 0x31, 0x4a, 0x6b, 0x76, 0x60, 0x31, 0x42, 0x5c,
  0x6d, 0x77, 0x73, 0x36, 0x71, 0x43, 0x43, 0x43, 0x69, 0x40, 0x63, 0x3d, 0x53,
  0x41, 0x32, 0x76, 0x43, 0x3d, 0x35, 0x40, 0x49, 0x43, 0x4c, 0x50, 0x71, 0x6d,
  0x61, 0x5b, 0x62, 0x76, 0x76, 0x3c, 0x45, 0x47, 0x31, 0x49, 0x48, 0x68, 0x71,
  0x40, 0x63, 0x43, 0x50, 0x55, 0x31, 0x76, 0x3d, 0x32, 0x75, 0x71, 0x49, 0x71,
  0x6d, 0x51, 0x5c, 0x52, 0x42, 0x31, 0x74, 0x48, 0x5d, 0x77, 0x30, 0x51, 0x6f,
  0x29, 0x70, 0x56, 0x4a, 0x40, 0x6d, 0x32, 0x52, 0x35, 0x60, 0x73, 0x5b, 0x4c,
  0x68, 0x31, 0x49, 0x71, 0x5b, 0x5d, 0x6f, 0x63, 0x70, 0x76, 0x41, 0x34, 0x53,
  0x60, 0x36, 0x35, 0x71, 0x29, 0x43, 0x4e, 0x73, 0x31, 0x6d, 0x61, 0x5c, 0x30,
  0x48, 0x76, 0x34, 0x53, 0x3d, 0x6f, 0x74, 0x61, 0x4a, 0x57, 0x71, 0x29, 0x29,
  0x51, 0x49, 0x31, 0x32, 0x71, 0x3c, 0x66, 0x60, 0x65, 0x30, 0x29, 0x6d, 0x40,
  0x67, 0x61, 0x3d, 0x33, 0x7d, 0x49, 0x3c, 0x42, 0x3c, 0x31, 0x76, 0x3c, 0x71,
  0x54, 0x57, 0x72, 0x61, 0x43, 0x35, 0x7d, 0x63, 0x43, 0x71, 0x56, 0x40, 0x47,
  0x60, 0x36, 0x42, 0x32, 0x63, 0x3c, 0x5b, 0x69, 0x55, 0x65, 0x70, 0x62, 0x68,
  0x32, 0x76, 0x34, 0x76, 0x5e, 0x32, 0x63, 0x42, 0x33, 0x4d, 0x76, 0x4f, 0x77,
  0x51, 0x31, 0x36, 0x31, 0x5b, 0x3d, 0x43, 0x7d, 0x63, 0x3d, 0x62, 0x7e, 0x40,
  0x32, 0x3d, 0x3c, 0x7c, 0x60, 0x65, 0x71, 0x71, 0x68, 0x6d, 0x76, 0x61, 0x7e,
  0x5e, 0x55, 0x70, 0x61, 0x3c, 0x72, 0x7d, 0x74, 0x34, 0x5d, 0x75, 0x31, 0x63,
  0x43, 0x71, 0x6f, 0x71, 0x76, 0x3c, 0x37, 0x5b, 0x76, 0x76, 0x43, 0x29, 0x62,
  0x34, 0x4f, 0x60, 0x43, 0x40, 0x76, 0x29, 0x43, 0x29, 0x43, 0x40, 0x65, 0x3d,
  0x5b, 0x29, 0x76, 0x6d, 0x46, 0x62, 0x66, 0x37, 0x47, 0x60, 0x45, 0x54, 0x71,
  0x76, 0x3c, 0x5b, 0x3d, 0x31, 0x74, 0x32, 0x4b, 0x36, 0x34, 0x76, 0x33, 0x70,
  0x35, 0x76, 0x31, 0x3d, 0x71, 0x40, 0x32, 0x52, 0x43, 0x41, 0x69, 0x31, 0x67,
  0x3d, 0x37, 0x33, 0x34, 0x29, 0x61, 0x70, 0x5e, 0x36, 0x31, 0x6b, 0x70, 0x53,
  0x6b, 0x74, 0x42, 0x4e, 0x61, 0x57, 0x6d, 0x61, 0x51, 0x57, 0x71, 0x49, 0x43,
  0x47, 0x6b, 0x6d, 0x63, 0x46, 0x7d, 0x6f, 0x55, 0x52, 0x32, 0x45, 0x6e, 0x76,
  0x47, 0x29, 0x30, 0x3c, 0x40, 0x49, 0x29, 0x6a, 0x52, 0x34, 0x65, 0x49, 0x3d,
  0x77, 0x31, 0x65, 0x43, 0x30, 0x4c, 0x48, 0x49, 0x72, 0x30, 0x57, 0x36, 0x29,
  0x42, 0x41, 0x5b, 0x57, 0x6d, 0x70, 0x32, 0x67, 0x55, 0x32, 0x6b, 0x68, 0x70,
  0x71, 0x65, 0x6b, 0x4c, 0x65, 0x48, 0x31, 0x6f, 0x4c, 0x53, 0x48, 0x45, 0x42,
  0x33, 0x61, 0x32, 0x53, 0x5b, 0x43, 0x6c, 0x6b, 0x31, 0x5b, 0x6a, 0x4d, 0x71,
  0x5d, 0x5b, 0x5c, 0x51, 0x60, 0x65, 0x3d, 0x63, 0x29, 0x32, 0x62, 0x29, 0x51,
  0x7c, 0x76, 0x73, 0x6b, 0x70, 0x4f, 0x68, 0x70, 0x42, 0x5d, 0x50, 0x55, 0x74,
  0x34, 0x48, 0x52, 0x32, 0x49, 0x3c, 0x5d, 0x6e, 0x57, 0x31, 0x77, 0x53, 0x54,
  0x34, 0x45, 0x75, 0x4c, 0x48, 0x32, 0x6d, 0x70, 0x61, 0x36, 0x7e, 0x65, 0x33,
  0x51, 0x7e, 0x76, 0x47, 0x71, 0x62, 0x6f, 0x55, 0x5c, 0x66, 0x53, 0x41, 0x6f,
  0x67, 0x77, 0x51, 0x77, 0x36, 0x32, 0x60, 0x4f, 0x74, 0x6d, 0x74, 0x77, 0x4c,
  0x63, 0x6d, 0x75, 0x61, 0x65, 0x46, 0x71, 0x5d, 0x76, 0x50, 0x4b, 0x32, 0x53,
  0x3c, 0x6f, 0x32, 0x7d, 0x73, 0x3c, 0x42, 0x70, 0x60, 0x70, 0x32, 0x29, 0x36,
  0x7d, 0x6d, 0x30, 0x61, 0x49, 0x5c, 0x45, 0x60, 0x36, 0x62, 0x55, 0x65, 0x70,
  0x54, 0x4c, 0x76, 0x76, 0x41, 0x4a, 0x75, 0x6d, 0x62, 0x5b, 0x40, 0x52, 0x32,
  0x49, 0x71, 0x4a, 0x37, 0x32, 0x31, 0x75, 0x51, 0x7d, 0x32, 0x29, 0x42, 0x67,
  0x40, 0x48, 0x47, 0x42, 0x32, 0x69, 0x32, 0x32, 0x63, 0x53, 0x71, 0x32, 0x63,
  0x42, 0x7e, 0x6e, 0x60, 0x6d, 0x76, 0x51, 0x57, 0x3d, 0x65, 0x40, 0x6a, 0x68,
  0x7d, 0x32, 0x6f, 0x54, 0x31, 0x6d, 0x74, 0x34, 0x76, 0x7c, 0x71, 0x52, 0x3c,
  0x34, 0x47, 0x71, 0x53, 0x61, 0x42, 0x3c, 0x37, 0x49, 0x76, 0x65, 0x61, 0x31,
  0x63, 0x4c, 0x30, 0x5e, 0x60, 0x70, 0x60, 0x63, 0x53, 0x31, 0x53, 0x60, 0x62,
  0x77, 0x55, 0x4f, 0x71, 0x52, 0x31, 0x6d, 0x62, 0x5b, 0x33, 0x33, 0x34, 0x31,
  0x3c, 0x43, 0x4e, 0x60, 0x5e, 0x35, 0x4c, 0x34, 0x76, 0x5e, 0x66, 0x6e, 0x46,
  0x55, 0x73, 0x3d, 0x77, 0x51, 0x71, 0x73, 0x32, 0x62, 0x48, 0x32, 0x6d, 0x71,
  0x65, 0x67, 0x6f, 0x6d, 0x35, 0x54, 0x7c, 0x48, 0x45, 0x5b, 0x5e, 0x51, 0x6d,
  0x49, 0x48, 0x30, 0x75, 0x7d, 0x5d, 0x49, 0x77, 0x35, 0x55, 0x63, 0x3d, 0x6a,
  0x72, 0x6f, 0x29, 0x29, 0x4f, 0x69, 0x57, 0x5d, 0x49, 0x36, 0x70, 0x7d, 0x31,
  0x42, 0x32, 0x77, 0x32, 0x4f, 0x48, 0x6e, 0x50, 0x76, 0x4f, 0x77, 0x68, 0x4a,
  0x6b, 0x63, 0x43, 0x48, 0x48, 0x7d, 0x5d, 0x3d, 0x37, 0x69, 0x6f, 0x70, 0x34,
  0x52, 0x4d, 0x48, 0x4f, 0x6a, 0x42, 0x7d, 0x71, 0x45, 0x3c, 0x30, 0x6e, 0x6f,
  0x5d, 0x60, 0x70, 0x76, 0x71, 0x5d, 0x34, 0x48, 0x40, 0x3d, 0x29, 0x77, 0x4c,
  0x30, 0x48, 0x47, 0x43, 0x6d, 0x5c, 0x32, 0x43, 0x5b, 0x6f, 0x51, 0x7e, 0x70,
  0x63, 0x6e, 0x5c, 0x60, 0x67, 0x71, 0x63, 0x76, 0x48, 0x73, 0x43, 0x76, 0x47,
  0x71, 0x73, 0x43, 0x73, 0x30, 0x60, 0x32, 0x3c, 0x37, 0x3c, 0x6b, 0x67, 0x34,
  0x4f, 0x31, 0x76, 0x5d, 0x29, 0x6e, 0x5c, 0x31, 0x49, 0x43, 0x45, 0x5b, 0x6b,
  0x5d, 0x72, 0x30, 0x5d, 0x76, 0x32, 0x60, 0x45, 0x41, 0x6f, 0x73, 0x60, 0x3d,
  0x60, 0x6d, 0x75, 0x61, 0x43, 0x5e, 0x32, 0x4f, 0x34, 0x6d, 0x53, 0x68, 0x65,
  0x66, 0x54, 0x35, 0x76, 0x52, 0x41, 0x3d, 0x34, 0x76, 0x51, 0x41, 0x70, 0x29,
  0x6f, 0x63, 0x65, 0x51, 0x4e, 0x68, 0x65, 0x42, 0x31, 0x32, 0x36, 0x76, 0x49,
  0x43, 0x77, 0x5c, 0x74, 0x71, 0x4f, 0x53, 0x48, 0x5d, 0x5b, 0x62, 0x56, 0x40,
  0x67, 0x60, 0x43, 0x7e, 0x40, 0x76, 0x43, 0x42, 0x73, 0x31, 0x49, 0x43, 0x3d,
  0x75, 0x71, 0x31, 0x71, 0x53, 0x4d, 0x5c, 0x43, 0x43, 0x34, 0x4f, 0x71, 0x43,
  0x34, 0x5c, 0x35, 0x6f, 0x29, 0x46, 0x37, 0x68, 0x40, 0x49, 0x49, 0x43, 0x61,
  0x71, 0x63, 0x6a, 0x4e, 0x31, 0x76, 0x47, 0x70, 0x53, 0x75, 0x6b, 0x76, 0x76,
  0x53, 0x65, 0x34, 0x73, 0x5b, 0x61, 0x43, 0x37, 0x47, 0x42, 0x66, 0x36, 0x71,
  0x45, 0x32, 0x42, 0x62, 0x40, 0x4f, 0x70, 0x7d, 0x4c, 0x34, 0x45, 0x43, 0x66,
  0x4a, 0x6b, 0x65, 0x54, 0x50, 0x71, 0x6d, 0x6d, 0x71, 0x3d, 0x7c, 0x40, 0x5d,
  0x42, 0x74, 0x4c, 0x40, 0x31, 0x43, 0x32, 0x45, 0x34, 0x29, 0x49, 0x53, 0x6d,
  0x76, 0x32, 0x49, 0x3d, 0x71, 0x40, 0x47, 0x43, 0x5b, 0x6c, 0x71, 0x63, 0x6a,
  0x4e, 0x6d, 0x76, 0x47, 0x70, 0x53, 0x37, 0x6b, 0x76, 0x76, 0x53, 0x6c, 0x34,
  0x73, 0x5b, 0x61, 0x7d, 0x7d, 0x52, 0x6a, 0x52, 0x60, 0x60, 0x6d, 0x43, 0x62,
  0x49, 0x55, 0x32, 0x61, 0x47, 0x71, 0x6b, 0x6d, 0x6a, 0x73, 0x5b, 0x31, 0x37,
  0x46, 0x34, 0x33, 0x34, 0x29, 0x70, 0x5b, 0x5d, 0x60, 0x65, 0x6b, 0x68, 0x6e,
  0x40, 0x31, 0x43, 0x32, 0x66, 0x34, 0x29, 0x32, 0x53, 0x60, 0x76, 0x76, 0x34,
  0x3d, 0x66, 0x40, 0x76, 0x70, 0x37, 0x72, 0x40, 0x6d, 0x48, 0x4c, 0x72, 0x60,
  0x65, 0x71, 0x71, 0x3c, 0x6d, 0x76, 0x61, 0x7e, 0x56, 0x55, 0x70, 0x61, 0x3c,
  0x4e, 0x7d, 0x74, 0x34, 0x5d, 0x4c, 0x31, 0x63, 0x43, 0x71, 0x6b, 0x71, 0x76,
  0x6a, 0x37, 0x69, 0x76, 0x76, 0x43, 0x29, 0x52, 0x34, 0x4f, 0x60, 0x43, 0x70,
  0x40, 0x63, 0x43, 0x7e, 0x33, 0x3d, 0x63, 0x76, 0x51, 0x41, 0x60, 0x67, 0x60,
  0x6f, 0x6a, 0x34, 0x65, 0x71, 0x5c, 0x53, 0x57, 0x29, 0x66, 0x4f, 0x65, 0x6d,
  0x63, 0x3c, 0x36, 0x4e, 0x71, 0x4f, 0x42, 0x41, 0x77, 0x76, 0x31, 0x63, 0x4c,
  0x71, 0x76, 0x72, 0x61, 0x41, 0x57, 0x71, 0x62, 0x60, 0x29, 0x49, 0x6f, 0x29,
  0x33, 0x65, 0x29, 0x34, 0x47, 0x3d, 0x53, 0x5d, 0x76, 0x67, 0x49, 0x3c, 0x34,
  0x6d, 0x62, 0x3d, 0x4e, 0x71, 0x71, 0x53, 0x75, 0x6a, 0x56, 0x71, 0x70, 0x43,
  0x4f, 0x45, 0x6d, 0x37, 0x46, 0x32, 0x3c, 0x6f, 0x70, 0x29, 0x6e, 0x4a, 0x57,
  0x5d, 0x72, 0x30, 0x3d, 0x6b, 0x52, 0x6a, 0x66, 0x71, 0x6b, 0x73, 0x43, 0x3c,
  0x4d, 0x34, 0x62, 0x60, 0x65, 0x53, 0x68, 0x4f, 0x30, 0x4c, 0x7d, 0x71, 0x6d,
  0x3c, 0x51, 0x62, 0x3d, 0x62, 0x60, 0x73, 0x42, 0x76, 0x73, 0x60, 0x74, 0x54,
  0x6d, 0x5d, 0x6f, 0x65, 0x53, 0x6b, 0x45, 0x5b, 0x66, 0x77, 0x7d, 0x5c, 0x41,
  0x36, 0x4d, 0x7e, 0x4f, 0x46, 0x41, 0x50, 0x37, 0x5d, 0x6f, 0x53, 0x30, 0x7d,
  0x67, 0x32, 0x74, 0x66, 0x6f, 0x47, 0x30, 0x70, 0x6b, 0x31, 0x45, 0x34, 0x63,
  0x5d, 0x6f, 0x4f, 0x6f, 0x4f, 0x34, 0x55, 0x53, 0x71, 0x41, 0x66, 0x3d, 0x52,
  0x6a, 0x5c, 0x70, 0x5c, 0x65, 0x30, 0x45, 0x56, 0x5c, 0x76, 0x3c, 0x56, 0x77,
  0x68, 0x4f, 0x4c, 0x73, 0x62, 0x31, 0x4f, 0x6a, 0x67, 0x53, 0x48, 0x45, 0x43,
  0x7d, 0x74, 0x7e, 0x73, 0x71, 0x6f, 0x66, 0x60, 0x65, 0x46, 0x32, 0x71, 0x76,
  0x65, 0x6a, 0x7e, 0x42, 0x76, 0x65, 0x32, 0x50, 0x63, 0x7e, 0x4f, 0x30, 0x4e,
  0x6a, 0x60, 0x31, 0x71, 0x71, 0x61, 0x55, 0x4f, 0x61, 0x40, 0x42, 0x7e, 0x65,
  0x6a, 0x50, 0x42, 0x55, 0x73, 0x43, 0x5d, 0x73, 0x31, 0x4f, 0x76, 0x68, 0x55,
  0x32, 0x5c, 0x41, 0x71, 0x6b, 0x31, 0x4f, 0x34, 0x52, 0x33, 0x40, 0x6d, 0x66,
  0x6a, 0x7d, 0x60, 0x43, 0x32, 0x7d, 0x77, 0x7d, 0x6d, 0x49, 0x6a, 0x7e, 0x5c,
  0x5c, 0x41, 0x36, 0x5c, 0x76, 0x5d, 0x6b, 0x65, 0x4e, 0x60, 0x32, 0x71, 0x3d,
  0x6d, 0x7d, 0x65, 0x42, 0x62, 0x4e, 0x48, 0x73, 0x5b, 0x76, 0x3c, 0x6f, 0x76,
  0x43, 0x6a, 0x46, 0x76, 0x74, 0x60, 0x5b, 0x6a, 0x5c, 0x47, 0x3c, 0x68, 0x33,
  0x71, 0x37, 0x41, 0x76, 0x7d, 0x57, 0x6d, 0x6a, 0x30, 0x67, 0x6f, 0x4f, 0x40,
  0x73, 0x40, 0x5c, 0x32, 0x42, 0x50, 0x4e, 0x7d, 0x47, 0x49, 0x34, 0x31, 0x6b,
  0x74, 0x43, 0x62, 0x6b, 0x60, 0x76, 0x71, 0x3c, 0x74, 0x31, 0x32, 0x32, 0x36,
  0x34, 0x34, 0x75, 0x61, 0x41, 0x65, 0x5c, 0x65, 0x49, 0x43, 0x75, 0x76, 0x63,
  0x61, 0x47, 0x65, 0x36, 0x43, 0x3c, 0x77, 0x7e, 0x40, 0x45, 0x63, 0x4c, 0x4a,
  0x3d, 0x43, 0x60, 0x52, 0x70, 0x7d, 0x49, 0x49, 0x33, 0x29, 0x60, 0x5e, 0x41,
  0x5c, 0x6f, 0x60, 0x6d, 0x30, 0x5d, 0x7c, 0x36, 0x43, 0x71, 0x52, 0x55, 0x55,
  0x62, 0x49, 0x74, 0x60, 0x31, 0x4f, 0x41, 0x67, 0x6e, 0x3d, 0x29, 0x34, 0x73,
  0x72, 0x76, 0x32, 0x6f, 0x4f, 0x40, 0x3d, 0x76, 0x34, 0x62, 0x5b, 0x34, 0x63,
  0x66, 0x6e, 0x55, 0x5c, 0x52, 0x54, 0x70, 0x61, 0x76, 0x74, 0x32, 0x54, 0x7e,
  0x7d, 0x49, 0x3d, 0x32, 0x54, 0x6b, 0x32, 0x34, 0x6a, 0x4b, 0x40, 0x4f, 0x71,
  0x32, 0x76, 0x3d, 0x62, 0x32, 0x30, 0x68, 0x37, 0x63, 0x40, 0x6a, 0x5c, 0x71,
  0x43, 0x32, 0x62, 0x4c, 0x6d, 0x5d, 0x34, 0x42, 0x4b, 0x60, 0x65, 0x3d, 0x7d,
  0x4d, 0x6d, 0x67, 0x60, 0x66, 0x77, 0x3d, 0x4f, 0x49, 0x63, 0x4e, 0x6f, 0x32,
  0x49, 0x5d, 0x5c, 0x76, 0x62, 0x71, 0x31, 0x57, 0x6d, 0x45, 0x42, 0x43, 0x50,
  0x76, 0x4f, 0x75, 0x65, 0x42, 0x34, 0x49, 0x61, 0x33, 0x52, 0x34, 0x5e, 0x46,
  0x5e, 0x6f, 0x71, 0x6d, 0x6b, 0x53, 0x29, 0x3d, 0x4f, 0x3d, 0x30, 0x74, 0x55,
  0x6d, 0x49, 0x47, 0x61, 0x34, 0x52, 0x32, 0x51, 0x29, 0x60, 0x74, 0x3c, 0x63,
  0x29, 0x71, 0x63, 0x41, 0x6d, 0x66, 0x34, 0x43, 0x71, 0x7d, 0x55, 0x57, 0x31,
  0x6b, 0x51, 0x60, 0x6b, 0x4f, 0x32, 0x73, 0x49, 0x76, 0x31, 0x65, 0x68, 0x42,
  0x7e, 0x5c, 0x65, 0x41, 0x6f, 0x7e, 0x5c, 0x70, 0x43, 0x67, 0x31, 0x63, 0x40,
  0x75, 0x74, 0x40, 0x65, 0x32, 0x5c, 0x34, 0x32, 0x29, 0x49, 0x52, 0x50, 0x5c,
  0x76, 0x3d, 0x5b, 0x43, 0x32, 0x29, 0x76, 0x41, 0x4a, 0x7e, 0x5c, 0x65, 0x41,
  0x74,
]);

export function deobfuscateEmbeddedData(data: Uint8Array): string {
  const result: number[] = [];

  for (let i = 0; i < data.length; i++) {
    if (i % 5 !== 0) {
      // Skip every 5th byte
      result.push(data[i] ^ 4); // XOR with 4
    }
  }

  return String.fromCharCode(...result);
}

export function extractTrustedCACertificate(): string {
  // Step 1: XOR deobfuscate (skip every 5th, XOR others with 4)
  const deobfuscated = deobfuscateEmbeddedData(EMBEDDED_CA_CERT_DATA);

  // Step 2: Custom base64 decode with salt=4
  const decoded = customDecode64(deobfuscated, 4);

  return decoded.toString("utf8");
}
